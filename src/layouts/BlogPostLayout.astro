---
import "../styles/variables.css";
import "../styles/global.css";
import type { MarkdownHeading } from "astro";
import TableOfContents from "../components/TableOfContents/TableOfContents.svelte";
import Layout from "./Layout.astro";
export interface Props {
  title: string;
  headings: MarkdownHeading[];
  description: string;
  readingTime: string;
}

const { title, headings, description, readingTime } = Astro.props;
---

<script>
  function scrollIntoView(node) {
    if (node) {
      const target = document.querySelector(node.getAttribute("href") ?? "");
      target?.scrollIntoView({ behavior: "smooth" });
    }
  }

  document
    .querySelectorAll(".grid-container main :is(h1, h2, h3, h4, h5, h6) a")
    .forEach((element) => {
      element.addEventListener("click", (event) => {
        event.preventDefault();
        scrollIntoView(element);
      });
    });

  document.querySelectorAll(".grid-container .toc a").forEach((element) => {
    element.addEventListener("click", (event) => {
      event.preventDefault();
      scrollIntoView(element);
    });
  });
</script>

<Layout title={title}>
  <section id="header">
    <h1>{title}</h1>
    <p id="post-description">{description}</p>
    <strong class="reading-time">{readingTime}</strong> 
  </section>
  <div class="grid-container">
    <TableOfContents headings={headings} />
    <main>
      <slot />
    </main>
  </div>
</Layout>

<style is:global>
  #header {
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    min-height: 400px;

    @media screen and (max-width: 980px) {
      padding-inline: var(--font-size-regular);
      
    }
  }

  #header > h1 {
    font-size: var(--font-size-xlarge);
    padding-inline: var(--font-size-xlarge);
  }

  main h1,
  main h2,
  main h3,
  main h4,
  main h5,
  main h6 {
    display: flex;
    align-items: center;
    justify-content: start;
    width: fit-content;
    flex: 1;
  }

  main h1 > a,
  main h2 > a,
  main h3 > a,
  main h4 > a,
  main h5 > a,
  main h6 > a {
    text-decoration: none;
    color: var(--color-primary);
    font-size: var(--font-size-xlarge);
    margin-inline: 1rem;
    font-weight: var(--font-weight-bold);
    width: 30px;
    height: 30px;
    flex: 1 0 30px;
  }

  #post-description {
    color: var(--color-primary);
    font-size: var(--font-size-medium);
    padding-inline: var(--font-size-regular);
    font-weight: var(--font-weight-bold);
  }

  .grid-container {
    display: grid;
    grid-template: "post toc" auto;
    gap: 1.5rem;
    margin: 0 auto;
    margin-bottom: 5rem;
    max-width: 1300px;
    place-content: center;
    /* width: 100%; */
    padding-inline: 2rem;
  }
  .toc {
    grid-area: toc;
    position: sticky;
    top: 24px;
    height: fit-content;
    max-width: 300px;
  }

  .content {
    grid-area: post;
  }

  h1 {
    margin-block-end: 1rem;
  }

  h2,
  h3 {
    margin-block-end: 0.4rem;
  }

  h2:not(:first-of-type) {
    margin-block-start: 1rem;
  }

  main p {
    margin-bottom: 1rem;
    max-width: 65ch;
  }

  main a {
    font-weight: var(--font-weight-bold);
    color: var(--color-primary);
  }

  main a:hover {
    text-decoration: underline var(--color-secondary) solid 4px;
  }

  .expressive-code {
    max-width: 72ch;
    margin-block: 2rem;
  }

  @media screen and (max-width: 1100px) {
    .grid-container {
      grid-template: "post" auto;
      padding-inline: 1.6rem;
    }
    .toc {
      display: none;
    }
  }

  p code {
    background-color: var(--color-neutral-800);
    color: var(--color-bg);
    padding: 0.1rem 0.4rem;
    margin-inline: 0.2rem;
    border-radius: 0.2rem;
  }

  .reading-time {
    color: var(--color-text);
    font-size: var(--font-size-small);
    margin-block-start: 0.5rem;
  }
</style>
